// TODO remove this file once everything is finalized
const fs = require('fs');
const path = require('path');
const helpers = require('./helpers');

if (result.error) {
	console.error("\nMissing .env file. Please see the documentation about setting up your environment.\n");
	return;
}

const banner = `/**
 * This file is autogenerated. Do not edit!
 * ----------------------------------------
 **/`;

// TODO move to CLI package
// const createCliTypesFile = () => {
// 	let content = banner + '\n\nimport { DataType, ExportType } from \'../../../client/_plugins\';\n';

// 	const blacklistedDataTypes = process.env.GD_DATA_TYPE_BLACKLIST.split(',');
// 	const dataTypes = helpers.getPlugins('dataTypes', []);
// 	const dtList = dataTypes.filter((dt) => blacklistedDataTypes.indexOf(dt) === -1); // TODO can this be in the prev lines, second param?

// 	dtList.forEach((dt) => {
// 		content += `import { generate as ${dt}G } from '../../../client/src/plugins/dataTypes/${dt}/${dt}.generate';\n`
// 		content += `import { defaultGenerationOptions as ${dt}DGO } from '../../../client/src/plugins/dataTypes/${dt}/${dt}.state';\n`
// 	});

// 	content += `\n\nexport const dataTypeNodeData = {\n`;
// 	const rows = dtList.map((dt) => `\t[DataType.${dt}]: { generate: ${dt}G, defaultGenerationOptions: ${dt}DGO }`);
// 	content += `${rows.join(',\n')}\n};\n\n`

// 	const blacklistedExportTypes = process.env.GD_EXPORT_TYPE_BLACKLIST.split(',');
// 	const etList = helpers.getPlugins('exportTypes', blacklistedExportTypes);

// 	etList.forEach((et) => {
// 		content += `import { generate as ${et}G } from '../../../client/src/plugins/exportTypes/${et}/${et}.generate';\n`
// 		content += `import { defaultGenerationOptions as ${et}DGO } from '../../../client/src/plugins/exportTypes/${et}/${et}.state';\n`
// 	});

// 	content += `\n\nexport const exportTypeNodeData = {\n`;
// 	const etRows = etList.map((et) => `\t[ExportType.${et}]: { generate: ${et}G, defaultGenerationOptions: ${et}DGO }`);
// 	content += `${etRows.join(',\n')}\n};\n\n`

// 	const file = path.join(__dirname, '../../../packages/cli/src', '_cliTypes.ts'); // TODO
// 	if (fs.existsSync(file)) {
// 		fs.unlinkSync(file);
// 	}
// 	fs.writeFileSync(file, content);
// };


// TODO move this to the website code. Until it's needed for the core script; dump it.
// const createImportFile = () => {
// 	const importLines = [];
// 	const files = process.env.GD_IMPORT_FILES;

// 	if (files) {
// 		files.split(',').forEach((filePathFromRoot) => {
// 			importLines.push(`import '../${filePathFromRoot}';`);
// 		});
// 	}

// 	const file = path.join(__dirname, '..', '_imports.ts');
// 	if (fs.existsSync(file)) {
// 		fs.unlinkSync(file);
// 	}

// 	// rollup gets confused with an empty file, so we add a default exports just in case
// 	if (!importLines.length) {
// 		importLines.push(`// DO NOT EDIT: This is autogenerated by a node script \nexport default {};`);
// 	}
// 	fs.writeFileSync(file, importLines.join('\n'));
// };


// const generateNamesFile = () => {
// 	const namePlugins = helpers.getNamePlugins();

// 	let content = banner + '\n\n';
// 	namePlugins.forEach((folder) => {
// 		content += `import ${folder} from './src/plugins/countries/${folder}/names';\n`;
// 	});

// 	content += `\nconst nameFiles = {\n\t${namePlugins.join(',\n\t')}\n};`;
// 	content += `\nexport default nameFiles;\n`;
// 	content += '\nexport type CountryNameFiles = keyof typeof nameFiles;\n';

// 	const file = path.join(__dirname, '..', '_namePlugins.ts');
// 	if (fs.existsSync(file)) {
// 		fs.unlinkSync(file);
// 	}
// 	fs.writeFileSync(file, content);
// };

// generateEnvFile('_env.ts', JSON.stringify(envFile, null, '\t'));
// generateNamesFile();

// createCliTypesFile();
// createImportFile();
